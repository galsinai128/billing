{"ast":null,"code":"export function idGen() {\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  let id = '';\n  id = id + getRandomInt(0, 10) + getRandomInt(0, 10) + getRandomInt(0, 10) + '-' + getRandomInt(0, 10) + getRandomInt(0, 10) + '-' + getRandomInt(0, 10) + getRandomInt(0, 10) + getRandomInt(0, 10) + getRandomInt(0, 10);\n  return id;\n}\nexport function inputValidation(editedObject) {\n  let valid = true;\n  let inValidFields = {};\n\n  for (const [key, value] of Object.entries(editedObject)) {\n    if (value === '') {\n      inValidFields[key] = true;\n    }\n\n    if (key === 'email') {\n      if (!validateEmail(value)) {\n        inValidFields[key] = true;\n      }\n    }\n\n    if (key === 'cerdit_card_number' || key === 'total_price') {\n      if (!validateNumber(value)) {\n        inValidFields[key] = true;\n      }\n    }\n\n    if (key === 'cerdit_card_type' || key === 'currency') {\n      if (!validateCharacters(value)) {\n        inValidFields[key] = true;\n      }\n    }\n  }\n\n  return valid;\n}\n\nfunction validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nfunction validateNumber(str) {\n  return !isNaN(str);\n}\n\nfunction validateCharacters(str) {\n  return /^[a-zA-Z]+$/.test(str);\n}","map":{"version":3,"sources":["/Users/galsinay/dev/billing-server/client/src/utils.js"],"names":["idGen","getRandomInt","min","max","Math","ceil","floor","random","id","inputValidation","editedObject","valid","inValidFields","key","value","Object","entries","validateEmail","validateNumber","validateCharacters","email","re","test","String","toLowerCase","str","isNaN"],"mappings":"AAAA,OAAO,SAASA,KAAT,GAAgB;AACnB,WAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9BD,IAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,IAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,WAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP,CAH8B,CAGwB;AACvD;;AACD,MAAIM,EAAE,GAAG,EAAT;AACAA,EAAAA,EAAE,GAAGA,EAAE,GAAGP,YAAY,CAAC,CAAD,EAAG,EAAH,CAAjB,GAA0BA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAtC,GAA+CA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA3D,GAAoE,GAApE,GAA0EA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAtF,GAA+FA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA3G,GAAoH,GAApH,GAA0HA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAtI,GAA+IA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA3J,GAAoKA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAhL,GAAyLA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA1M;AACA,SAAOO,EAAP;AACD;AAEH,OAAO,SAASC,eAAT,CAAyBC,YAAzB,EAAsC;AACzC,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeN,YAAf,CAA3B,EAAyD;AACrD,QAAII,KAAK,KAAK,EAAd,EAAkB;AAChBF,MAAAA,aAAa,CAACC,GAAD,CAAb,GAAqB,IAArB;AACD;;AACD,QAAIA,GAAG,KAAK,OAAZ,EAAoB;AAClB,UAAI,CAACI,aAAa,CAACH,KAAD,CAAlB,EAA0B;AACxBF,QAAAA,aAAa,CAACC,GAAD,CAAb,GAAqB,IAArB;AACD;AACF;;AACD,QAAIA,GAAG,KAAK,oBAAR,IAAgCA,GAAG,KAAK,aAA5C,EAA0D;AACxD,UAAI,CAACK,cAAc,CAACJ,KAAD,CAAnB,EAA2B;AACzBF,QAAAA,aAAa,CAACC,GAAD,CAAb,GAAqB,IAArB;AACD;AACF;;AACD,QAAIA,GAAG,KAAK,kBAAR,IAA8BA,GAAG,KAAK,UAA1C,EAAqD;AACnD,UAAI,CAACM,kBAAkB,CAACL,KAAD,CAAvB,EAA+B;AAC7BF,QAAAA,aAAa,CAACC,GAAD,CAAb,GAAqB,IAArB;AACD;AACF;AACF;;AACH,SAAOF,KAAP;AACH;;AAED,SAASM,aAAT,CAAuBG,KAAvB,EAA8B;AAC5B,QAAMC,EAAE,GAAG,uJAAX;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACH,KAAD,CAAN,CAAcI,WAAd,EAAR,CAAP;AACD;;AAGD,SAASN,cAAT,CAAwBO,GAAxB,EAA4B;AAC1B,SAAO,CAACC,KAAK,CAACD,GAAD,CAAb;AACD;;AAED,SAASN,kBAAT,CAA4BM,GAA5B,EAAgC;AAC9B,SAAO,cAAcH,IAAd,CAAmBG,GAAnB,CAAP;AACD","sourcesContent":["export function idGen(){\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    }\n    let id = '';\n    id = id + getRandomInt(0,10) + getRandomInt(0,10) + getRandomInt(0,10) + '-' + getRandomInt(0,10) + getRandomInt(0,10) + '-' + getRandomInt(0,10) + getRandomInt(0,10) + getRandomInt(0,10) + getRandomInt(0,10) \n    return id;\n  }\n\nexport function inputValidation(editedObject){\n    let valid = true;\n    let inValidFields = {};\n    for (const [key, value] of Object.entries(editedObject)) {\n        if (value === '') {\n          inValidFields[key] = true;\n        }\n        if (key === 'email'){\n          if (!validateEmail(value)){\n            inValidFields[key] = true;\n          } \n        }\n        if (key === 'cerdit_card_number' || key === 'total_price'){\n          if (!validateNumber(value)){\n            inValidFields[key] = true;\n          } \n        }\n        if (key === 'cerdit_card_type' || key === 'currency'){\n          if (!validateCharacters(value)){\n            inValidFields[key] = true;\n          } \n        }\n      }\n    return valid;\n}\n\nfunction validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\n\nfunction validateNumber(str){\n  return !isNaN(str);\n}\n\nfunction validateCharacters(str){\n  return /^[a-zA-Z]+$/.test(str);\n}\n"]},"metadata":{},"sourceType":"module"}