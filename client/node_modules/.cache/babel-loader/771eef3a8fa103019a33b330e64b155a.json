{"ast":null,"code":"var _jsxFileName = \"/Users/galsinay/dev/billing-client/src/components/TransactionsList/TransactionsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './TransactionsList.css';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport DetailsModal from '../DetailsModal/DetailsModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TransactionsList({\n  addItem\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  const [currentTransaction, setCurrentTransactions] = useState(null);\n  const [isNewItem, setIsNewItem] = useState(false);\n  useEffect(() => {\n    getTransactions().then(res => {\n      setTransactions(res.data.data);\n    }).catch(err => {\n      console.log('error getting transactions', err);\n    });\n  }, []);\n\n  function viewDetails(transaction) {\n    setCurrentTransactions(transaction);\n  }\n\n  function closeDetails() {\n    setCurrentTransactions(null);\n    setIsNewItem(false);\n  }\n\n  function deleteTransaction(event, transaction) {\n    event.stopPropagation(); //delete from server\n\n    deleteTransactions(transaction._id); //delete in client\n\n    let transactionsCopy = [...transactions];\n    let index = transactionsCopy.findIndex(item => item._id === transaction._id);\n    transactionsCopy.splice(index, 1);\n    setTransactions(transactionsCopy);\n  }\n\n  function editTransaction(editetTransaction) {\n    //edit server\n    editTransactions(editetTransaction); //edit client\n\n    let transactionsNew = transactions.map(transaction => transaction._id === editetTransaction._id ? editetTransaction : transaction);\n    setTransactions(transactionsNew);\n    closeDetails();\n  }\n\n  function addTransaction(editetTransaction) {\n    editetTransaction.customer_id = idGen(); //add server\n\n    addTransactions(editetTransaction); //add client\n\n    let transactionsCopy = [...transactions];\n    transactionsCopy.push(editetTransaction);\n    setTransactions(transactionsCopy);\n    closeDetails();\n  }\n\n  function idGen() {\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    }\n\n    let id = '';\n    id = id + getRandomInt(0, 10) + getRandomInt(0, 10) + getRandomInt(0, 10) + '-' + getRandomInt(0, 10) + getRandomInt(0, 10) + '-' + getRandomInt(0, 10) + getRandomInt(0, 10) + getRandomInt(0, 10) + getRandomInt(0, 10);\n    return id;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"entitysList\",\n    children: [currentTransaction ? /*#__PURE__*/_jsxDEV(DetailsModal, {\n      transaction: currentTransaction,\n      closeDetails: closeDetails,\n      editTransaction: editetTransaction => editTransaction(editetTransaction),\n      isNewItem: isNewItem,\n      addTransaction: editetTransaction => addTransaction(editetTransaction)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(ListGroup, {\n      children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        onClick: () => {\n          viewDetails({\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\",\n            gender: \"\",\n            country: \"\",\n            city: \"\",\n            street: \"\",\n            phone: \"\",\n            total_price: \"\",\n            currency: \"\",\n            cerdit_card_type: \"\",\n            cerdit_card_number: \"\"\n          });\n          setIsNewItem(true);\n        },\n        className: 'EntitysItem add-btn',\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), transactions.map(transaction => {\n        return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          active: currentTransaction && currentTransaction.customer_id === transaction.customer_id,\n          className: 'EntitysItem',\n          onClick: () => viewDetails(transaction),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: `${transaction.first_name} ${transaction.last_name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'btns-container',\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: event => deleteTransaction(event, transaction),\n              children: \"\\u2717\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, transaction.customer_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsList, \"g69Ki0DVbRyG0JieEEv+udryqIg=\");\n\n_c = TransactionsList;\nexport default TransactionsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsList\");","map":{"version":3,"sources":["/Users/galsinay/dev/billing-client/src/components/TransactionsList/TransactionsList.js"],"names":["React","useState","ListGroup","DetailsModal","TransactionsList","addItem","transactions","setTransactions","currentTransaction","setCurrentTransactions","isNewItem","setIsNewItem","useEffect","getTransactions","then","res","data","catch","err","console","log","viewDetails","transaction","closeDetails","deleteTransaction","event","stopPropagation","deleteTransactions","_id","transactionsCopy","index","findIndex","item","splice","editTransaction","editetTransaction","editTransactions","transactionsNew","map","addTransaction","customer_id","idGen","addTransactions","push","getRandomInt","min","max","Math","ceil","floor","random","id","first_name","last_name","email","gender","country","city","street","phone","total_price","currency","cerdit_card_type","cerdit_card_number"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,wBAAP;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AAEA,OAAOC,YAAP,MAAyB,8BAAzB;;;AAEA,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAsC;AAAA;;AACpC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,kBAAD,EAAqBC,sBAArB,IAA+CR,QAAQ,CAAC,IAAD,CAA7D;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEAW,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,eAAe,GAAGC,IAAlB,CAAuBC,GAAG,IAAI;AAC5BR,MAAAA,eAAe,CAACQ,GAAG,CAACC,IAAJ,CAASA,IAAV,CAAf;AACD,KAFD,EAGCC,KAHD,CAGOC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAAyCF,GAAzC;AACD,KALD;AAMD,GAPQ,EAOP,EAPO,CAAT;;AASA,WAASG,WAAT,CAAqBC,WAArB,EAAiC;AAC/Bb,IAAAA,sBAAsB,CAACa,WAAD,CAAtB;AACD;;AAED,WAASC,YAAT,GAAuB;AACrBd,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AAED,WAASa,iBAAT,CAA2BC,KAA3B,EAAiCH,WAAjC,EAA6C;AAC3CG,IAAAA,KAAK,CAACC,eAAN,GAD2C,CAE3C;;AACAC,IAAAA,kBAAkB,CAACL,WAAW,CAACM,GAAb,CAAlB,CAH2C,CAK3C;;AACA,QAAIC,gBAAgB,GAAG,CAAC,GAAGvB,YAAJ,CAAvB;AACA,QAAIwB,KAAK,GAAGD,gBAAgB,CAACE,SAAjB,CAA2BC,IAAI,IAAIA,IAAI,CAACJ,GAAL,KAAaN,WAAW,CAACM,GAA5D,CAAZ;AACAC,IAAAA,gBAAgB,CAACI,MAAjB,CAAwBH,KAAxB,EAA8B,CAA9B;AACAvB,IAAAA,eAAe,CAACsB,gBAAD,CAAf;AACD;;AAED,WAASK,eAAT,CAAyBC,iBAAzB,EAA2C;AACzC;AACAC,IAAAA,gBAAgB,CAACD,iBAAD,CAAhB,CAFyC,CAIzC;;AACA,QAAIE,eAAe,GAAG/B,YAAY,CAACgC,GAAb,CAAiBhB,WAAW,IAAIA,WAAW,CAACM,GAAZ,KAAoBO,iBAAiB,CAACP,GAAtC,GAA4CO,iBAA5C,GAAgEb,WAAhG,CAAtB;AACAf,IAAAA,eAAe,CAAC8B,eAAD,CAAf;AACAd,IAAAA,YAAY;AACb;;AAED,WAASgB,cAAT,CAAwBJ,iBAAxB,EAA0C;AACxCA,IAAAA,iBAAiB,CAACK,WAAlB,GAAgCC,KAAK,EAArC,CADwC,CAExC;;AACAC,IAAAA,eAAe,CAACP,iBAAD,CAAf,CAHwC,CAKxC;;AACA,QAAIN,gBAAgB,GAAG,CAAC,GAAGvB,YAAJ,CAAvB;AACAuB,IAAAA,gBAAgB,CAACc,IAAjB,CAAsBR,iBAAtB;AACA5B,IAAAA,eAAe,CAACsB,gBAAD,CAAf;AACAN,IAAAA,YAAY;AACb;;AAED,WAASkB,KAAT,GAAgB;AACd,aAASG,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9BD,MAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,MAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,aAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP,CAH8B,CAGwB;AACvD;;AACD,QAAIM,EAAE,GAAG,EAAT;AACAA,IAAAA,EAAE,GAAGA,EAAE,GAAGP,YAAY,CAAC,CAAD,EAAG,EAAH,CAAjB,GAA0BA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAtC,GAA+CA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA3D,GAAoE,GAApE,GAA0EA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAtF,GAA+FA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA3G,GAAoH,GAApH,GAA0HA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAtI,GAA+IA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA3J,GAAoKA,YAAY,CAAC,CAAD,EAAG,EAAH,CAAhL,GAAyLA,YAAY,CAAC,CAAD,EAAG,EAAH,CAA1M;AACA,WAAOO,EAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,eACG3C,kBAAkB,gBACjB,QAAC,YAAD;AACE,MAAA,WAAW,EAAEA,kBADf;AAEE,MAAA,YAAY,EAAEe,YAFhB;AAGE,MAAA,eAAe,EAAGY,iBAAD,IAAqBD,eAAe,CAACC,iBAAD,CAHvD;AAIE,MAAA,SAAS,EAAEzB,SAJb;AAKE,MAAA,cAAc,EAAGyB,iBAAD,IAAqBI,cAAc,CAACJ,iBAAD;AALrD;AAAA;AAAA;AAAA;AAAA,YADiB,GAOG,IARxB,eASE,QAAC,SAAD;AAAA,8BACE,QAAC,SAAD,CAAW,IAAX;AACE,QAAA,OAAO,EAAE,MAAI;AAACd,UAAAA,WAAW,CAAC;AACxB+B,YAAAA,UAAU,EAAE,EADY;AAExBC,YAAAA,SAAS,EAAE,EAFa;AAGxBC,YAAAA,KAAK,EAAE,EAHiB;AAIxBC,YAAAA,MAAM,EAAE,EAJgB;AAKxBC,YAAAA,OAAO,EAAE,EALe;AAMxBC,YAAAA,IAAI,EAAE,EANkB;AAOxBC,YAAAA,MAAM,EAAE,EAPgB;AAQxBC,YAAAA,KAAK,EAAE,EARiB;AASxBC,YAAAA,WAAW,EAAE,EATW;AAUxBC,YAAAA,QAAQ,EAAE,EAVc;AAWxBC,YAAAA,gBAAgB,EAAE,EAXM;AAYxBC,YAAAA,kBAAkB,EAAE;AAZI,WAAD,CAAX;AAaTpD,UAAAA,YAAY,CAAC,IAAD,CAAZ;AAAmB,SAd1B;AAeE,QAAA,SAAS,EAAE,qBAfb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAkBGL,YAAY,CAACgC,GAAb,CAAiBhB,WAAW,IAAI;AAAC,4BAC9B,QAAC,SAAD,CAAW,IAAX;AAEI,UAAA,MAAM,EAAEd,kBAAkB,IAAIA,kBAAkB,CAACgC,WAAnB,KAAmClB,WAAW,CAACkB,WAFjF;AAGI,UAAA,SAAS,EAAE,aAHf;AAII,UAAA,OAAO,EAAE,MAAInB,WAAW,CAACC,WAAD,CAJ5B;AAAA,kCAME;AAAA,sBAAO,GAAEA,WAAW,CAAC8B,UAAW,IAAG9B,WAAW,CAAC+B,SAAU;AAAzD;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAK,YAAA,SAAS,EAAE,gBAAhB;AAAA,mCACE;AAAK,cAAA,OAAO,EAAG5B,KAAD,IAASD,iBAAiB,CAACC,KAAD,EAAOH,WAAP,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA,WACSA,WAAW,CAACkB,WADrB;AAAA;AAAA;AAAA;AAAA,gBAD8B;AAYX,OAZtB,CAlBH;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD;;GAhHQpC,gB;;KAAAA,gB;AAkHT,eAAeA,gBAAf","sourcesContent":["import React, { useState } from 'react';\nimport './TransactionsList.css';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport DetailsModal from '../DetailsModal/DetailsModal'\n\nfunction TransactionsList({ addItem}) {\n  const [transactions, setTransactions] = useState([]);\n  const [currentTransaction, setCurrentTransactions] = useState(null);\n  const [isNewItem, setIsNewItem] = useState(false);\n\n  useEffect(() => {\n    getTransactions().then(res => {\n      setTransactions(res.data.data);\n    })\n    .catch(err => {\n      console.log('error getting transactions',err)\n    })\n  },[]);\n\n  function viewDetails(transaction){\n    setCurrentTransactions(transaction);\n  }\n\n  function closeDetails(){\n    setCurrentTransactions(null);\n    setIsNewItem(false);\n  }\n\n  function deleteTransaction(event,transaction){\n    event.stopPropagation();\n    //delete from server\n    deleteTransactions(transaction._id);\n\n    //delete in client\n    let transactionsCopy = [...transactions];\n    let index = transactionsCopy.findIndex(item => item._id === transaction._id);\n    transactionsCopy.splice(index,1);\n    setTransactions(transactionsCopy);\n  }\n\n  function editTransaction(editetTransaction){\n    //edit server\n    editTransactions(editetTransaction);\n\n    //edit client\n    let transactionsNew = transactions.map(transaction => transaction._id === editetTransaction._id ? editetTransaction : transaction)\n    setTransactions(transactionsNew);\n    closeDetails();\n  }\n\n  function addTransaction(editetTransaction){\n    editetTransaction.customer_id = idGen();\n    //add server\n    addTransactions(editetTransaction);\n\n    //add client\n    let transactionsCopy = [...transactions];\n    transactionsCopy.push(editetTransaction);\n    setTransactions(transactionsCopy);\n    closeDetails();\n  }\n\n  function idGen(){\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    }\n    let id = '';\n    id = id + getRandomInt(0,10) + getRandomInt(0,10) + getRandomInt(0,10) + '-' + getRandomInt(0,10) + getRandomInt(0,10) + '-' + getRandomInt(0,10) + getRandomInt(0,10) + getRandomInt(0,10) + getRandomInt(0,10) \n    return id;\n  }\n\n  return (\n    <div className=\"entitysList\">\n      {currentTransaction ? (\n        <DetailsModal \n          transaction={currentTransaction}      \n          closeDetails={closeDetails}\n          editTransaction={(editetTransaction)=>editTransaction(editetTransaction)}\n          isNewItem={isNewItem}\n          addTransaction={(editetTransaction)=>addTransaction(editetTransaction)}\n        ></DetailsModal>) : null}\n      <ListGroup>\n        <ListGroup.Item \n          onClick={()=>{viewDetails({\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\",\n            gender: \"\",\n            country: \"\",\n            city: \"\",\n            street: \"\",\n            phone: \"\",\n            total_price: \"\",\n            currency: \"\",\n            cerdit_card_type: \"\",\n            cerdit_card_number: \"\"\n          });  setIsNewItem(true)}}\n          className={'EntitysItem add-btn'}\n        >Add Transaction</ListGroup.Item>\n        {transactions.map(transaction => {return (\n            <ListGroup.Item\n                key={transaction.customer_id}\n                active={currentTransaction && currentTransaction.customer_id === transaction.customer_id}\n                className={'EntitysItem'}\n                onClick={()=>viewDetails(transaction)}\n            >\n              <div>{`${transaction.first_name} ${transaction.last_name}`}</div>\n              <div className={'btns-container'}>\n                <div onClick={(event)=>deleteTransaction(event,transaction)}>✗</div>\n              </div>\n\n            </ListGroup.Item>)})}\n      </ListGroup>\n    </div>\n  );\n}\n\nexport default TransactionsList;\n"]},"metadata":{},"sourceType":"module"}